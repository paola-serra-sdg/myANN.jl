using DataFrames
using Plots
using Images
using Lathe.preprocess: TrainTestSplit
#Pkg.add("DataFrames")
image_dog = readdir(raw"C:\\Users\\serrap\\Downloads\\data\\natural_images\\dog")
image_cat = readdir(raw"C:\\Users\\serrap\\Downloads\\data\\natural_images\\cat")


images=[]
for i in image_dog
    append!(images,1)
end
for i in image_cat
    append!(images,0)
end

df2 = DataFrame([image_cat],[:x1]) 
df1 =DataFrame([image_dog], [:x1])
dff =vcat(df1, df2)
di =DataFrame([images], [:x2])

df = hcat(dff,di)


img= load("C:\\Users\\serrap\\Downloads\\data\\natural_images\\dog\\dog_0002.jpg")
plot(img)
size(img)
labels= ["dog","cat"]

train, test = TrainTestSplit(df,0.7)
#--------------PARTE NUOVA FINISCE QUI
#da rivedere questo è in python
#x_data =[]
#y_data = []
#for label in labels
    #folder_data = os.listdir("../input/natural-images/natural_images/"+label)
   # folder_data= union(readdir(raw"C:\\Users\\serrap\\Downloads\\data\\natural_images\\"),label)
    #folder_data= readdir(raw"C:\\Users\\serrap\\Downloads\\data\\natural_images\\")
    #folder= union(folder_data,label)
#end
    #for image_path in folder_data
        #image = union(load("C:\\Users\\serrap\\Downloads\\data\\natural_images\\"),label"\\"image_path)
       # image = cv2.imread("../input/natural-images/natural_images/"+label+'/'+image_path)
        #image_resized = cv2.resize(image, (80,80)) # Change the number of pixels for all images
        #img_resized = imresize(img, (90, 90))
        #append!(x_data,img_resized)
       # append!(y_data,labels)
       # x_data.append(np.array(image_resized))
        #y_data.append(label)
        #pass
    #end
    #pass
#end


# Dense layer: (in::Integer, out::Integer, σ = identity)
model = Chain(
        flatten,
        Dense(28^2, 32, relu),
        Dense(32, 10)
)
params = Flux.params(model)

optimiser = ADAM()
loss(x,y) = logitcrossentropy(model(x), y)

evalcb = () -> @show(loss(train_x, train_y))

num_epochs = 10
@epochs num_epochs train!(loss, params, train_data, optimiser, cb = throttle(evalcb, 5))